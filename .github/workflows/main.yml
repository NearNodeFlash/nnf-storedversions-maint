name: Main test and release

on:
  push:
#  pull_request:

jobs:
  lint:
    name: Vet and Linter
    runs-on: ubuntu-latest
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Vet
        run: make vet

      - name: Run linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.63.4

  test-e2e:
    needs: lint
    name: Test e2e
    runs-on: ubuntu-latest
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install the latest version of kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Verify kind installation
        run: kind version

      - name: Create kind cluster
        run: kind create cluster

      - name: Running Test e2e
        run: |
          go mod tidy
          make test-e2e

  build:
    name: Build and push
    needs: test-e2e
    runs-on: ubuntu-latest
    steps:
    - name: "Checkout repository"
      id: checkout_repo
      uses: actions/checkout@v3
      with: 
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: "Lowercase repository name for docker build"
      id: lowercase-repository-name
      run: echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: "Set tags for main/master"
      id: set_tags
      run: |
        echo "VERSION_TAG=$(./git-version-gen | grep -v UNKNOWN)" >> ${GITHUB_ENV}
        echo "TEST_TAG=$(git rev-parse HEAD)-test" >> ${GITHUB_ENV}
        echo "SHA_TAG=$(git rev-parse HEAD)" >> ${GITHUB_ENV}
        echo "${GITHUB_ENV}:"
        cat ${GITHUB_ENV}
      shell: bash

    - name: "Verify auto-generated files"
      run: |
          make manifests generate
          git status
          if [[ $(git status -s | wc -l) -gt 0 ]]; then \
              exit 1; \
          fi

    - name: "Docker metadata"
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ghcr.io/${{ env.REPO_NAME }}
        tags: |
          # For merge to master branch, tag example: 'master'
          type=ref,event=branch
          # For PR event, tag example: 'pr-3'
          type=ref,event=pr
          # For PR event or merge event, tag example: 1.0.1.12-5667
          type=raw,value=${{ env.VERSION_TAG }}
          # For PR event or merge, tag example: 566769e04d2436cf5f42ae4f46092c7dff6e668e
          type=raw,value=${{ env.SHA_TAG }}
          # For push to semver tag, tag example: 1.0.2
          # This also sets 'latest'.
          type=semver,pattern={{version}}
          # For push to semver tag, tag example: 1.0
          type=semver,pattern={{major}}.{{minor}}

    - name: "Docker login"
      id: docker_login
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: "Build the final Docker image"
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ steps.meta.outputs.tags }}

  create_release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-tags: true
        fetch-depth: 0
    - name: Repair tag
      run: git fetch -f origin ${{ github.ref }}:${{ github.ref }}
    - name: Verify that the tag is annotated
      run: if test x$(git for-each-ref ${{ github.ref }} | awk '{print $2}') = xtag; then /bin/true; else echo "\"${{ github.ref }}\" does not look like an annotated tag!"; /bin/false; fi
    - name: Collect manifests
      run: make nnf-manifests
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        #prerelease: true
        generate_release_notes: true
        files: |
            manifests.tar

